var _       = require('lodash'),
    path    = require('path'),
    pfs     = require('../promised-fs'),
    PJV     = require('package-json-validator').PJV,

    checkPackageJSON,
    packageJSONFile = 'package.json';

/**
 * The following is the set of messages output by Ghost about theme package.json files.
 * The aim of this check is to replace, and improve on the info generated by Ghost
 *
 * ```
 * "parsepackagejson": {
 *      "couldNotReadPackage": "Could not read package.json file",
 *      "nameOrVersionMissing": "\"name\" or \"version\" is missing from theme package.json file.",
 *      "willBeRequired": "This will be required in future. Please see {url}",
 *      "themeFileIsMalformed": "Theme package.json file is malformed"
 *  },
 * "validatethemes": {
 *      "themeWithNoPackage": {
 *          "message": "Found a theme with no package.json file",
 *          "context": "Theme name: {name}",
 *          "help": "This will be required in future. Please see http://docs.ghost.org/themes/."
 *      },
 *      "malformedPackage": {
 *          "message": "Found a malformed package.json",
 *          "context": "Theme name: {name}",
 *          "help": "Valid package.json will be required in future. Please see http://docs.ghost.org/themes/."
 *      }
 * }
 * ```
 */

checkPackageJSON = function checkPackageJSON(theme) {
    // Rule 1: Test that the package.json file is present
    var existsRuleCode = 'GS010-PJ-REQ',
        validRuleCode = 'GS010-PJ-VAL',
        packageJSONPath = path.join(theme.path, packageJSONFile);

    if (!_.some(theme.files, {file: packageJSONFile})) {
        // file doesn't exist, rule has failed
        theme.results.fail[existsRuleCode] = {};
        // Auto-pass valid rule. The logic here is that a missing package.json is a warning, an invalid one is an error
        // This can probably be conflated into one rule, when we make package.json a hard requirement
        theme.results.pass.push(validRuleCode);
        return theme;
    } else {
        // file exists, rule has passed
        theme.results.pass.push(existsRuleCode);

        // Rule 2: Test that the provided package.json file is valid
        return pfs.readFile(packageJSONPath, 'utf8').then(function (packageJSON) {
            var result = PJV.validate(packageJSON);

            if (!result.valid) {
                // result is invalid, rule has failed
                // TODO: improve pass-thru of errors to failures
                theme.results.fail[validRuleCode] = {};

                if (result.critical) {
                    theme.results.fail[validRuleCode].message = result.critical;
                }

                if (result.errors) {
                    theme.results.fail[validRuleCode].failures = _.map(result.errors, function (error) {
                        return {ref: 'package.json', message: error};
                    });
                }
            } else {
                // result is valid, rule has passed
                theme.results.pass.push(validRuleCode);
            }

            if (result.valid || !result.critical) {
                // TODO: don't do this in such a horrible way (see gorillamania/package.json-validator#51)
                // Ideally, if name and version are both present and valid, we should add them to the theme data
                // Moving forward, we need to handle our own concept of what package.json is, including validations
                // So that we can output better error messages
                result = JSON.parse(packageJSON);
                theme.name = result.name;
                theme.version = result.version;
            }

            // Come back to this later, packageJSON validator is out of date and we have our own idea of what is important
            //out.warnings = result.warnings ? out.warnings.concat(result.warnings) : out.warnings;
            //out.recommendations = result.recommendations ? out.recommendations.concat(result.recommendations) : out.recommendations;

            return theme;
        }).catch(function (error) {
            // file could not be read, rule has failed
            theme.results.fail[validRuleCode] = {
                ref: 'package.json',
                message: error
            };

            return theme;
        });
    }
};

module.exports = checkPackageJSON;
